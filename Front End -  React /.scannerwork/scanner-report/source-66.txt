import React, { Component } from "react";

import "../../Styles/table.css";

import { connect } from "react-redux";
import PropTypes from "prop-types";
import { getNightCabHistory } from "../../Redux/actions/GET-API";
import CabHistoryUI from "./CabHistoryUI";

/**
 * to dispaly the cad history details
 *
 */
class CabHistory extends Component {
  constructor(props) {
    super(props);

    this.state = {
      Date1: null,
      Date2: null,
      pageSize: "",
      val: 0,
      sortBy: "",
      click: true,
      enable: false,
      isLoading: true,

      tableName: "NightCabTbl",
      fileName: "NightCabInfo",
    };
  }

  /**
   * to render and mount the cabHistory component
   */
  componentDidMount = () => {
    this.props.getNightCabHistory(
      this.state.Date1,
      this.state.Date2,
      this.props.token
    );
  };

  /**
   * to update the props
   * @param {object} nextProps
   * @param {object} prevState
   */
  static getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.status !== prevState.status1) {
      return { status1: nextProps.status };
    } else return null;
  }

  
  /**
   * to set the status
   * @param {object} prevProps
   *    @param {string} status
   */
  componentDidUpdate(prevProps) {
    if (prevProps.status !== this.props.status) {
      this.setState({ ...this.props.status, isLoading: false });
    }
  }

  /**to sort the table data according to the values passed
   * @param {Object} state -- state consists of the followings-
   *                  @param {string} Date1
   *                  @param {string} Date2
   *                  @param {string} sortBy
   *                  @param {string} val
   *                  @param {string} pageSize
   */
  handleTableChange = (e) => {
    let limit = this.props.totalPages;
    if (
      e.target.value === "20" ||
      e.target.value === "30" ||
      e.target.value === "40" ||
      e.target.value === "50"
    ) {
      this.setState({ pageSize: e.target.value, val: 0 }, () =>
        this.props.getNightCabHistory(
          this.state.Date1,
          this.state.Date2,
          this.props.token,
          this.state.sortBy,
          this.state.val,
          this.state.pageSize
        )
      );
    } else if (e.target.value === "employeeId") {
      this.setState({ sortBy: e.target.value }, () =>
        this.props.getNightCabHistory(
          this.state.Date1,
          this.state.Date2,
          this.props.token,
          this.state.sortBy,
          this.state.val,
          this.state.pageSize
        )
      );
    } else if (e.target.id === "next") {
      if (this.state.val < limit - 1) {
        this.setState({ val: this.state.val + 1 }, () => {
          this.props.getNightCabHistory(
            this.state.Date1,
            this.state.Date2,
            this.props.token,
            this.state.sortBy,
            this.state.val,
            this.state.pageSize
          );
        });
      }
    } else if (e.target.id === "prev") {
      if (this.state.val > 0) {
        this.setState({ val: this.state.val - 1 }, () => {
          this.props.getNightCabHistory(
            this.state.Date1,
            this.state.Date2,
            this.props.token,
            this.state.sortBy,
            this.state.val,
            this.state.pageSize
          );
        });
      }
    }
  };

  /**
   * to convet the date to string
   */
  convert = (str) => {
    var date = new Date(str),
      mnth = ("0" + (date.getMonth() + 1)).slice(-2),
      day = ("0" + date.getDate()).slice(-2);
    return [date.getFullYear(), mnth, day].join("-");
  };

  /**
   * to set the dates
   */
  handleEvent = (event, picker) => {
    this.setState(
      {
        Date1: this.convert(picker.startDate._d).substring(0, 10),
        Date2: this.convert(picker.endDate._d).substring(0, 10),
        pageSize: "",
        val: 0,
        sortBy: "",
      },
      () => {
        this.props.getNightCabHistory(
          this.state.Date1,
          this.state.Date2,
          this.props.token,
          this.state.sortBy,
          this.state.val,
          this.state.pageSize
        );
      }
    );
  };
  render() {
    /**
     *  @returns {JSX.Element}-rendered component of CabhistoryUI
     */
    return (
      <CabHistoryUI
        data-test="CabHistory"
        handleTableChange={this.handleTableChange}
        handleEvent={this.handleEvent}
        isLoading={this.state.isLoading}
        val={this.state.val}
        status={this.props.status}
        tableName={this.state.tableName}
        fileName={this.state.fileName}
      />
    );
  }
}

function mapStateToProps(state) {
  return {
    status: state.getReducer.nightCabHistory,
    totalPages: state.getReducer.totalPages,
    token: state.userReducer.tokken,
    error: state.vehicleReducer.errorMsg,
  };
}

export default connect(mapStateToProps, {
  getNightCabHistory,
})(CabHistory);

CabHistory.propTypes = {
  token: PropTypes.string,
  value: PropTypes.string,
  getNightCabHistory: PropTypes.func,
  status: PropTypes.object,
  totalPages: PropTypes.string,
};
